KINOXP - CRITICAL ISSUES LOCATIONS (DO NOT FIX - ANALYSIS ONLY)
=================================================================

ðŸš¨ ISSUE #1: AVAILABLE SEATS ENDPOINT BROKEN
=================================================================

LOCATION: ScreeningServiceImpl.getAvailableSeats() method
FILE: src/main/java/com/example/kinoxp/service/theatre/ScreeningServiceImpl.java
LINES: 99-119

PROBLEM ANALYSIS:
- URL: GET /api/screenings/{id}/available-seats returns 500 error
- Root Cause: Line 101: screening.getTheatre().getSeats()

SPECIFIC ISSUE:
screening.getTheatre().getSeats() returns NULL because:

1. Theatre entity has @JsonIgnore on seats field (line 30 in Theatre.java):
   @OneToMany(mappedBy = "theatre")
   @JsonIgnore
   private Set<Seat> seats;

2. This prevents Hibernate lazy loading from working properly
3. When getSeats() is called, it returns null instead of loading seats from database

CHAIN OF FAILURE:
ScreeningServiceImpl.getAvailableSeats() 
â†’ screening.getTheatre().getSeats() 
â†’ returns null 
â†’ HashSet constructor fails with NullPointerException
â†’ 500 Internal Server Error

AFFECTED CODE LOCATIONS:
- ScreeningServiceImpl.java:101 (primary failure point)
- Theatre.java:30-31 (@JsonIgnore prevents proper loading)
- ScreeningController.java:55-65 (endpoint that calls broken method)

=================================================================

ðŸš¨ ISSUE #2: RESERVATION WITH SEATS CREATION FAILS  
=================================================================

LOCATION: ReservationServiceImpl.createReservationWithSeats() method
FILE: src/main/java/com/example/kinoxp/service/booking/ReservationServiceImpl.java
LINES: 68-111

PROBLEM ANALYSIS:
- URL: POST /api/reservations with seatIds array returns 500 error
- Root Cause: JPA column name mismatch

SPECIFIC ISSUE:
ReservationSeat entity has incorrect @UniqueConstraint definition:

Current (WRONG):
@UniqueConstraint(columnNames = {"screening_id", "seat_id"})

Actual database columns (from DESCRIBE reservation_seat):
- screening_show_id (NOT screening_id)  
- seat_seat_id (NOT seat_id)
- reservation_reservation_id

MISMATCH DETAILS:
Entity expects:        Database has:
screening_id    â†’     screening_show_id  
seat_id         â†’     seat_seat_id

This causes SQL constraint errors when trying to create ReservationSeat records.

AFFECTED CODE LOCATIONS:
- ReservationSeat.java:13 (@UniqueConstraint with wrong column names)
- ReservationServiceImpl.java:95-106 (fails when saving ReservationSeat)
- ReservationController.java:24 (endpoint that calls broken method)

=================================================================

ðŸš¨ ISSUE #3: DATABASE COLUMN NAMING INCONSISTENCIES
=================================================================

MULTIPLE LOCATIONS: JPA entity field mappings vs actual database schema

PROBLEM ANALYSIS:
JPA entity annotations don't match actual database column names

SPECIFIC INCONSISTENCIES:

1. RESERVATION_SEAT TABLE:
   Entity Definition (ReservationSeat.java):
   - @ManyToOne Reservation reservation (maps to reservation_id by default)
   - @ManyToOne Screening screening (maps to screening_id by default)  
   - @ManyToOne Seat seat (maps to seat_id by default)
   
   Actual Database Columns:
   - reservation_reservation_id
   - screening_show_id  
   - seat_seat_id

2. UNIQUE CONSTRAINT MISMATCH:
   FILE: ReservationSeat.java:13
   Current: @UniqueConstraint(columnNames = {"screening_id", "seat_id"})
   Should be: @UniqueConstraint(columnNames = {"screening_show_id", "seat_seat_id"})

3. MISSING @JoinColumn ANNOTATIONS:
   ReservationSeat.java is missing explicit column mappings:
   - Line 28: @ManyToOne Reservation reservation 
     Should have: @JoinColumn(name = "reservation_reservation_id")
   - Line 32: @ManyToOne Screening screening
     Should have: @JoinColumn(name = "screening_show_id")  
   - Line 35: @ManyToOne Seat seat
     Should have: @JoinColumn(name = "seat_seat_id")

AFFECTED FILES:
- ReservationSeat.java:13 (UniqueConstraint)
- ReservationSeat.java:28,32,35 (Missing @JoinColumn annotations)

IMPACT:
- JPA generates wrong SQL queries
- Foreign key constraints fail
- Reservation creation with seats completely broken
- Available seats calculation fails due to wrong joins

=================================================================

ROOT CAUSE SUMMARY:
=================================================================

The three issues are interconnected:

1. AVAILABLE SEATS fails because @JsonIgnore prevents seat loading
2. RESERVATION CREATION fails because JPA column names don't match database  
3. DATABASE MAPPING is inconsistent throughout ReservationSeat entity

The database schema uses Hibernate's default naming strategy (entityName_primaryKey)
but the entity annotations assume simple column names.

FIX STRATEGY (DO NOT IMPLEMENT):
1. Add @JoinColumn annotations with correct database column names
2. Fix @UniqueConstraint to use actual column names  
3. Replace @JsonIgnore with proper repository method for seat loading
4. Add proper error handling and validation

=================================================================
END OF ANALYSIS
=================================================================